

`timescale 1 ps/ 1 ps
module ctrlunit_vlg_tst();
// constants                                           
// general purpose registers
//reg eachvec;
// test vector input registers
reg ZERO;
reg [3:0] op;
// wires                                               
wire [2:0]  ALUC;
wire ALUSRCB;
wire BRANCH;
wire JUMP;
wire MEMTOREG;
wire REGDES;
wire WRFLAG;
wire WRITEMEM;
wire WRITEREG;

// assign statements (if any)                          
ctrlunit i1 (
// port map - connection between master ports and signals/registers   
	.ALUC(ALUC),
	.ALUSRCB(ALUSRCB),
	.BRANCH(BRANCH),
	.JUMP(JUMP),
	.MEMTOREG(MEMTOREG),
	.REGDES(REGDES),
	.WRFLAG(WRFLAG),
	.WRITEMEM(WRITEMEM),
	.WRITEREG(WRITEREG),
	.ZERO(ZERO),
	.op(op)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
#0   op = 3'b000; ZERO = 0; 
#100	ZERO = 1'b1;
// --> end                                             
//$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
   #10  op = op + 3'b001;                                                   
//@eachvec;                                              
// --> end                                             
end                                                    
endmodule

