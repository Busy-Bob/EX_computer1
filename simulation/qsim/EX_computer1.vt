// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/25/2017 11:04:38"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    test_computer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module test_computer_vlg_sample_tst(
	CLKK,
	reset_pin,
	row,
	sampler_tx
);
input  CLKK;
input  reset_pin;
input [3:0] row;
output sampler_tx;

reg sample;
time current_time;
always @(CLKK or reset_pin or row)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module test_computer_vlg_check_tst (
	aluc,
	answer,
	carryout,
	choice,
	col,
	data_a,
	data_b,
	DI,
	num,
	pc,
	Q,
	reg_we,
	seg,
	state,
	Wren,
	sampler_rx
);
input [2:0] aluc;
input [7:0] answer;
input  carryout;
input [3:0] choice;
input [3:0] col;
input [7:0] data_a;
input [7:0] data_b;
input [7:0] DI;
input [7:0] num;
input [7:0] pc;
input [15:0] Q;
input  reg_we;
input [7:0] seg;
input [2:0] state;
input  Wren;
input sampler_rx;

reg [2:0] aluc_expected;
reg [7:0] answer_expected;
reg  carryout_expected;
reg [3:0] choice_expected;
reg [3:0] col_expected;
reg [7:0] data_a_expected;
reg [7:0] data_b_expected;
reg [7:0] DI_expected;
reg [7:0] num_expected;
reg [7:0] pc_expected;
reg [15:0] Q_expected;
reg  reg_we_expected;
reg [7:0] seg_expected;
reg [2:0] state_expected;
reg  Wren_expected;

reg [2:0] aluc_prev;
reg [7:0] answer_prev;
reg  carryout_prev;
reg [3:0] choice_prev;
reg [3:0] col_prev;
reg [7:0] data_a_prev;
reg [7:0] data_b_prev;
reg [7:0] DI_prev;
reg [7:0] num_prev;
reg [7:0] pc_prev;
reg [15:0] Q_prev;
reg  reg_we_prev;
reg [7:0] seg_prev;
reg [2:0] state_prev;
reg  Wren_prev;

reg [7:0] answer_expected_prev;
reg [3:0] choice_expected_prev;
reg [3:0] col_expected_prev;
reg [7:0] data_a_expected_prev;
reg [7:0] data_b_expected_prev;
reg [7:0] DI_expected_prev;
reg [7:0] pc_expected_prev;
reg [15:0] Q_expected_prev;
reg [7:0] seg_expected_prev;
reg [2:0] state_expected_prev;

reg [7:0] last_answer_exp;
reg [3:0] last_choice_exp;
reg [3:0] last_col_exp;
reg [7:0] last_data_a_exp;
reg [7:0] last_data_b_exp;
reg [7:0] last_DI_exp;
reg [7:0] last_pc_exp;
reg [15:0] last_Q_exp;
reg [7:0] last_seg_exp;
reg [2:0] last_state_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:15] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 15'b1;
end

// update real /o prevs

always @(trigger)
begin
	aluc_prev = aluc;
	answer_prev = answer;
	carryout_prev = carryout;
	choice_prev = choice;
	col_prev = col;
	data_a_prev = data_a;
	data_b_prev = data_b;
	DI_prev = DI;
	num_prev = num;
	pc_prev = pc;
	Q_prev = Q;
	reg_we_prev = reg_we;
	seg_prev = seg;
	state_prev = state;
	Wren_prev = Wren;
end

// update expected /o prevs

always @(trigger)
begin
	answer_expected_prev = answer_expected;
	choice_expected_prev = choice_expected;
	col_expected_prev = col_expected;
	data_a_expected_prev = data_a_expected;
	data_b_expected_prev = data_b_expected;
	DI_expected_prev = DI_expected;
	pc_expected_prev = pc_expected;
	Q_expected_prev = Q_expected;
	seg_expected_prev = seg_expected;
	state_expected_prev = state_expected;
end


// expected pc[ 7 ]
initial
begin
	pc_expected[7] = 1'bX;
end 
// expected pc[ 6 ]
initial
begin
	pc_expected[6] = 1'bX;
end 
// expected pc[ 5 ]
initial
begin
	pc_expected[5] = 1'bX;
end 
// expected pc[ 4 ]
initial
begin
	pc_expected[4] = 1'bX;
end 
// expected pc[ 3 ]
initial
begin
	pc_expected[3] = 1'bX;
end 
// expected pc[ 2 ]
initial
begin
	pc_expected[2] = 1'bX;
end 
// expected pc[ 1 ]
initial
begin
	pc_expected[1] = 1'bX;
end 
// expected pc[ 0 ]
initial
begin
	pc_expected[0] = 1'bX;
end 
// expected answer[ 7 ]
initial
begin
	answer_expected[7] = 1'bX;
end 
// expected answer[ 6 ]
initial
begin
	answer_expected[6] = 1'bX;
end 
// expected answer[ 5 ]
initial
begin
	answer_expected[5] = 1'bX;
end 
// expected answer[ 4 ]
initial
begin
	answer_expected[4] = 1'bX;
end 
// expected answer[ 3 ]
initial
begin
	answer_expected[3] = 1'bX;
end 
// expected answer[ 2 ]
initial
begin
	answer_expected[2] = 1'bX;
end 
// expected answer[ 1 ]
initial
begin
	answer_expected[1] = 1'bX;
end 
// expected answer[ 0 ]
initial
begin
	answer_expected[0] = 1'bX;
end 
// expected choice[ 3 ]
initial
begin
	choice_expected[3] = 1'bX;
end 
// expected choice[ 2 ]
initial
begin
	choice_expected[2] = 1'bX;
end 
// expected choice[ 1 ]
initial
begin
	choice_expected[1] = 1'bX;
end 
// expected choice[ 0 ]
initial
begin
	choice_expected[0] = 1'bX;
end 
// expected col[ 3 ]
initial
begin
	col_expected[3] = 1'bX;
end 
// expected col[ 2 ]
initial
begin
	col_expected[2] = 1'bX;
end 
// expected col[ 1 ]
initial
begin
	col_expected[1] = 1'bX;
end 
// expected col[ 0 ]
initial
begin
	col_expected[0] = 1'bX;
end 
// expected data_a[ 7 ]
initial
begin
	data_a_expected[7] = 1'bX;
end 
// expected data_a[ 6 ]
initial
begin
	data_a_expected[6] = 1'bX;
end 
// expected data_a[ 5 ]
initial
begin
	data_a_expected[5] = 1'bX;
end 
// expected data_a[ 4 ]
initial
begin
	data_a_expected[4] = 1'bX;
end 
// expected data_a[ 3 ]
initial
begin
	data_a_expected[3] = 1'bX;
end 
// expected data_a[ 2 ]
initial
begin
	data_a_expected[2] = 1'bX;
end 
// expected data_a[ 1 ]
initial
begin
	data_a_expected[1] = 1'bX;
end 
// expected data_a[ 0 ]
initial
begin
	data_a_expected[0] = 1'bX;
end 
// expected data_b[ 7 ]
initial
begin
	data_b_expected[7] = 1'bX;
end 
// expected data_b[ 6 ]
initial
begin
	data_b_expected[6] = 1'bX;
end 
// expected data_b[ 5 ]
initial
begin
	data_b_expected[5] = 1'bX;
end 
// expected data_b[ 4 ]
initial
begin
	data_b_expected[4] = 1'bX;
end 
// expected data_b[ 3 ]
initial
begin
	data_b_expected[3] = 1'bX;
end 
// expected data_b[ 2 ]
initial
begin
	data_b_expected[2] = 1'bX;
end 
// expected data_b[ 1 ]
initial
begin
	data_b_expected[1] = 1'bX;
end 
// expected data_b[ 0 ]
initial
begin
	data_b_expected[0] = 1'bX;
end 
// expected DI[ 7 ]
initial
begin
	DI_expected[7] = 1'bX;
end 
// expected DI[ 6 ]
initial
begin
	DI_expected[6] = 1'bX;
end 
// expected DI[ 5 ]
initial
begin
	DI_expected[5] = 1'bX;
end 
// expected DI[ 4 ]
initial
begin
	DI_expected[4] = 1'bX;
end 
// expected DI[ 3 ]
initial
begin
	DI_expected[3] = 1'bX;
end 
// expected DI[ 2 ]
initial
begin
	DI_expected[2] = 1'bX;
end 
// expected DI[ 1 ]
initial
begin
	DI_expected[1] = 1'bX;
end 
// expected DI[ 0 ]
initial
begin
	DI_expected[0] = 1'bX;
end 
// expected Q[ 15 ]
initial
begin
	Q_expected[15] = 1'bX;
end 
// expected Q[ 14 ]
initial
begin
	Q_expected[14] = 1'bX;
end 
// expected Q[ 13 ]
initial
begin
	Q_expected[13] = 1'bX;
end 
// expected Q[ 12 ]
initial
begin
	Q_expected[12] = 1'bX;
end 
// expected Q[ 11 ]
initial
begin
	Q_expected[11] = 1'bX;
end 
// expected Q[ 10 ]
initial
begin
	Q_expected[10] = 1'bX;
end 
// expected Q[ 9 ]
initial
begin
	Q_expected[9] = 1'bX;
end 
// expected Q[ 8 ]
initial
begin
	Q_expected[8] = 1'bX;
end 
// expected Q[ 7 ]
initial
begin
	Q_expected[7] = 1'bX;
end 
// expected Q[ 6 ]
initial
begin
	Q_expected[6] = 1'bX;
end 
// expected Q[ 5 ]
initial
begin
	Q_expected[5] = 1'bX;
end 
// expected Q[ 4 ]
initial
begin
	Q_expected[4] = 1'bX;
end 
// expected Q[ 3 ]
initial
begin
	Q_expected[3] = 1'bX;
end 
// expected Q[ 2 ]
initial
begin
	Q_expected[2] = 1'bX;
end 
// expected Q[ 1 ]
initial
begin
	Q_expected[1] = 1'bX;
end 
// expected Q[ 0 ]
initial
begin
	Q_expected[0] = 1'bX;
end 
// expected seg[ 7 ]
initial
begin
	seg_expected[7] = 1'bX;
end 
// expected seg[ 6 ]
initial
begin
	seg_expected[6] = 1'bX;
end 
// expected seg[ 5 ]
initial
begin
	seg_expected[5] = 1'bX;
end 
// expected seg[ 4 ]
initial
begin
	seg_expected[4] = 1'bX;
end 
// expected seg[ 3 ]
initial
begin
	seg_expected[3] = 1'bX;
end 
// expected seg[ 2 ]
initial
begin
	seg_expected[2] = 1'bX;
end 
// expected seg[ 1 ]
initial
begin
	seg_expected[1] = 1'bX;
end 
// expected seg[ 0 ]
initial
begin
	seg_expected[0] = 1'bX;
end 
// expected state[ 2 ]
initial
begin
	state_expected[2] = 1'bX;
end 
// expected state[ 1 ]
initial
begin
	state_expected[1] = 1'bX;
end 
// expected state[ 0 ]
initial
begin
	state_expected[0] = 1'bX;
end 
// generate trigger
always @(aluc_expected or aluc or answer_expected or answer or carryout_expected or carryout or choice_expected or choice or col_expected or col or data_a_expected or data_a or data_b_expected or data_b or DI_expected or DI or num_expected or num or pc_expected or pc or Q_expected or Q or reg_we_expected or reg_we or seg_expected or seg or state_expected or state or Wren_expected or Wren)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected aluc = %b | expected answer = %b | expected carryout = %b | expected choice = %b | expected col = %b | expected data_a = %b | expected data_b = %b | expected DI = %b | expected num = %b | expected pc = %b | expected Q = %b | expected reg_we = %b | expected seg = %b | expected state = %b | expected Wren = %b | ",aluc_expected_prev,answer_expected_prev,carryout_expected_prev,choice_expected_prev,col_expected_prev,data_a_expected_prev,data_b_expected_prev,DI_expected_prev,num_expected_prev,pc_expected_prev,Q_expected_prev,reg_we_expected_prev,seg_expected_prev,state_expected_prev,Wren_expected_prev);
	$display("| real aluc = %b | real answer = %b | real carryout = %b | real choice = %b | real col = %b | real data_a = %b | real data_b = %b | real DI = %b | real num = %b | real pc = %b | real Q = %b | real reg_we = %b | real seg = %b | real state = %b | real Wren = %b | ",aluc_prev,answer_prev,carryout_prev,choice_prev,col_prev,data_a_prev,data_b_prev,DI_prev,num_prev,pc_prev,Q_prev,reg_we_prev,seg_prev,state_prev,Wren_prev);
`endif
	if (
		( answer_expected_prev[0] !== 1'bx ) && ( answer_prev[0] !== answer_expected_prev[0] )
		&& ((answer_expected_prev[0] !== last_answer_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[0] = answer_expected_prev[0];
	end
	if (
		( answer_expected_prev[1] !== 1'bx ) && ( answer_prev[1] !== answer_expected_prev[1] )
		&& ((answer_expected_prev[1] !== last_answer_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[1] = answer_expected_prev[1];
	end
	if (
		( answer_expected_prev[2] !== 1'bx ) && ( answer_prev[2] !== answer_expected_prev[2] )
		&& ((answer_expected_prev[2] !== last_answer_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[2] = answer_expected_prev[2];
	end
	if (
		( answer_expected_prev[3] !== 1'bx ) && ( answer_prev[3] !== answer_expected_prev[3] )
		&& ((answer_expected_prev[3] !== last_answer_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[3] = answer_expected_prev[3];
	end
	if (
		( answer_expected_prev[4] !== 1'bx ) && ( answer_prev[4] !== answer_expected_prev[4] )
		&& ((answer_expected_prev[4] !== last_answer_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[4] = answer_expected_prev[4];
	end
	if (
		( answer_expected_prev[5] !== 1'bx ) && ( answer_prev[5] !== answer_expected_prev[5] )
		&& ((answer_expected_prev[5] !== last_answer_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[5] = answer_expected_prev[5];
	end
	if (
		( answer_expected_prev[6] !== 1'bx ) && ( answer_prev[6] !== answer_expected_prev[6] )
		&& ((answer_expected_prev[6] !== last_answer_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[6] = answer_expected_prev[6];
	end
	if (
		( answer_expected_prev[7] !== 1'bx ) && ( answer_prev[7] !== answer_expected_prev[7] )
		&& ((answer_expected_prev[7] !== last_answer_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[7] = answer_expected_prev[7];
	end
	if (
		( choice_expected_prev[0] !== 1'bx ) && ( choice_prev[0] !== choice_expected_prev[0] )
		&& ((choice_expected_prev[0] !== last_choice_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port choice[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", choice_expected_prev);
		$display ("     Real value = %b", choice_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_choice_exp[0] = choice_expected_prev[0];
	end
	if (
		( choice_expected_prev[1] !== 1'bx ) && ( choice_prev[1] !== choice_expected_prev[1] )
		&& ((choice_expected_prev[1] !== last_choice_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port choice[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", choice_expected_prev);
		$display ("     Real value = %b", choice_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_choice_exp[1] = choice_expected_prev[1];
	end
	if (
		( choice_expected_prev[2] !== 1'bx ) && ( choice_prev[2] !== choice_expected_prev[2] )
		&& ((choice_expected_prev[2] !== last_choice_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port choice[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", choice_expected_prev);
		$display ("     Real value = %b", choice_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_choice_exp[2] = choice_expected_prev[2];
	end
	if (
		( choice_expected_prev[3] !== 1'bx ) && ( choice_prev[3] !== choice_expected_prev[3] )
		&& ((choice_expected_prev[3] !== last_choice_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port choice[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", choice_expected_prev);
		$display ("     Real value = %b", choice_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_choice_exp[3] = choice_expected_prev[3];
	end
	if (
		( col_expected_prev[0] !== 1'bx ) && ( col_prev[0] !== col_expected_prev[0] )
		&& ((col_expected_prev[0] !== last_col_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_expected_prev);
		$display ("     Real value = %b", col_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_col_exp[0] = col_expected_prev[0];
	end
	if (
		( col_expected_prev[1] !== 1'bx ) && ( col_prev[1] !== col_expected_prev[1] )
		&& ((col_expected_prev[1] !== last_col_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_expected_prev);
		$display ("     Real value = %b", col_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_col_exp[1] = col_expected_prev[1];
	end
	if (
		( col_expected_prev[2] !== 1'bx ) && ( col_prev[2] !== col_expected_prev[2] )
		&& ((col_expected_prev[2] !== last_col_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_expected_prev);
		$display ("     Real value = %b", col_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_col_exp[2] = col_expected_prev[2];
	end
	if (
		( col_expected_prev[3] !== 1'bx ) && ( col_prev[3] !== col_expected_prev[3] )
		&& ((col_expected_prev[3] !== last_col_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_expected_prev);
		$display ("     Real value = %b", col_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_col_exp[3] = col_expected_prev[3];
	end
	if (
		( data_a_expected_prev[0] !== 1'bx ) && ( data_a_prev[0] !== data_a_expected_prev[0] )
		&& ((data_a_expected_prev[0] !== last_data_a_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_a[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_a_expected_prev);
		$display ("     Real value = %b", data_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_a_exp[0] = data_a_expected_prev[0];
	end
	if (
		( data_a_expected_prev[1] !== 1'bx ) && ( data_a_prev[1] !== data_a_expected_prev[1] )
		&& ((data_a_expected_prev[1] !== last_data_a_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_a[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_a_expected_prev);
		$display ("     Real value = %b", data_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_a_exp[1] = data_a_expected_prev[1];
	end
	if (
		( data_a_expected_prev[2] !== 1'bx ) && ( data_a_prev[2] !== data_a_expected_prev[2] )
		&& ((data_a_expected_prev[2] !== last_data_a_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_a[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_a_expected_prev);
		$display ("     Real value = %b", data_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_a_exp[2] = data_a_expected_prev[2];
	end
	if (
		( data_a_expected_prev[3] !== 1'bx ) && ( data_a_prev[3] !== data_a_expected_prev[3] )
		&& ((data_a_expected_prev[3] !== last_data_a_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_a[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_a_expected_prev);
		$display ("     Real value = %b", data_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_a_exp[3] = data_a_expected_prev[3];
	end
	if (
		( data_a_expected_prev[4] !== 1'bx ) && ( data_a_prev[4] !== data_a_expected_prev[4] )
		&& ((data_a_expected_prev[4] !== last_data_a_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_a[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_a_expected_prev);
		$display ("     Real value = %b", data_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_a_exp[4] = data_a_expected_prev[4];
	end
	if (
		( data_a_expected_prev[5] !== 1'bx ) && ( data_a_prev[5] !== data_a_expected_prev[5] )
		&& ((data_a_expected_prev[5] !== last_data_a_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_a[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_a_expected_prev);
		$display ("     Real value = %b", data_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_a_exp[5] = data_a_expected_prev[5];
	end
	if (
		( data_a_expected_prev[6] !== 1'bx ) && ( data_a_prev[6] !== data_a_expected_prev[6] )
		&& ((data_a_expected_prev[6] !== last_data_a_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_a[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_a_expected_prev);
		$display ("     Real value = %b", data_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_a_exp[6] = data_a_expected_prev[6];
	end
	if (
		( data_a_expected_prev[7] !== 1'bx ) && ( data_a_prev[7] !== data_a_expected_prev[7] )
		&& ((data_a_expected_prev[7] !== last_data_a_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_a[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_a_expected_prev);
		$display ("     Real value = %b", data_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_a_exp[7] = data_a_expected_prev[7];
	end
	if (
		( data_b_expected_prev[0] !== 1'bx ) && ( data_b_prev[0] !== data_b_expected_prev[0] )
		&& ((data_b_expected_prev[0] !== last_data_b_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_b[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_b_expected_prev);
		$display ("     Real value = %b", data_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_b_exp[0] = data_b_expected_prev[0];
	end
	if (
		( data_b_expected_prev[1] !== 1'bx ) && ( data_b_prev[1] !== data_b_expected_prev[1] )
		&& ((data_b_expected_prev[1] !== last_data_b_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_b[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_b_expected_prev);
		$display ("     Real value = %b", data_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_b_exp[1] = data_b_expected_prev[1];
	end
	if (
		( data_b_expected_prev[2] !== 1'bx ) && ( data_b_prev[2] !== data_b_expected_prev[2] )
		&& ((data_b_expected_prev[2] !== last_data_b_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_b[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_b_expected_prev);
		$display ("     Real value = %b", data_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_b_exp[2] = data_b_expected_prev[2];
	end
	if (
		( data_b_expected_prev[3] !== 1'bx ) && ( data_b_prev[3] !== data_b_expected_prev[3] )
		&& ((data_b_expected_prev[3] !== last_data_b_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_b[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_b_expected_prev);
		$display ("     Real value = %b", data_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_b_exp[3] = data_b_expected_prev[3];
	end
	if (
		( data_b_expected_prev[4] !== 1'bx ) && ( data_b_prev[4] !== data_b_expected_prev[4] )
		&& ((data_b_expected_prev[4] !== last_data_b_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_b[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_b_expected_prev);
		$display ("     Real value = %b", data_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_b_exp[4] = data_b_expected_prev[4];
	end
	if (
		( data_b_expected_prev[5] !== 1'bx ) && ( data_b_prev[5] !== data_b_expected_prev[5] )
		&& ((data_b_expected_prev[5] !== last_data_b_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_b[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_b_expected_prev);
		$display ("     Real value = %b", data_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_b_exp[5] = data_b_expected_prev[5];
	end
	if (
		( data_b_expected_prev[6] !== 1'bx ) && ( data_b_prev[6] !== data_b_expected_prev[6] )
		&& ((data_b_expected_prev[6] !== last_data_b_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_b[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_b_expected_prev);
		$display ("     Real value = %b", data_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_b_exp[6] = data_b_expected_prev[6];
	end
	if (
		( data_b_expected_prev[7] !== 1'bx ) && ( data_b_prev[7] !== data_b_expected_prev[7] )
		&& ((data_b_expected_prev[7] !== last_data_b_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_b[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_b_expected_prev);
		$display ("     Real value = %b", data_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_data_b_exp[7] = data_b_expected_prev[7];
	end
	if (
		( DI_expected_prev[0] !== 1'bx ) && ( DI_prev[0] !== DI_expected_prev[0] )
		&& ((DI_expected_prev[0] !== last_DI_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DI[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DI_expected_prev);
		$display ("     Real value = %b", DI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DI_exp[0] = DI_expected_prev[0];
	end
	if (
		( DI_expected_prev[1] !== 1'bx ) && ( DI_prev[1] !== DI_expected_prev[1] )
		&& ((DI_expected_prev[1] !== last_DI_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DI[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DI_expected_prev);
		$display ("     Real value = %b", DI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DI_exp[1] = DI_expected_prev[1];
	end
	if (
		( DI_expected_prev[2] !== 1'bx ) && ( DI_prev[2] !== DI_expected_prev[2] )
		&& ((DI_expected_prev[2] !== last_DI_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DI[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DI_expected_prev);
		$display ("     Real value = %b", DI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DI_exp[2] = DI_expected_prev[2];
	end
	if (
		( DI_expected_prev[3] !== 1'bx ) && ( DI_prev[3] !== DI_expected_prev[3] )
		&& ((DI_expected_prev[3] !== last_DI_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DI[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DI_expected_prev);
		$display ("     Real value = %b", DI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DI_exp[3] = DI_expected_prev[3];
	end
	if (
		( DI_expected_prev[4] !== 1'bx ) && ( DI_prev[4] !== DI_expected_prev[4] )
		&& ((DI_expected_prev[4] !== last_DI_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DI[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DI_expected_prev);
		$display ("     Real value = %b", DI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DI_exp[4] = DI_expected_prev[4];
	end
	if (
		( DI_expected_prev[5] !== 1'bx ) && ( DI_prev[5] !== DI_expected_prev[5] )
		&& ((DI_expected_prev[5] !== last_DI_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DI[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DI_expected_prev);
		$display ("     Real value = %b", DI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DI_exp[5] = DI_expected_prev[5];
	end
	if (
		( DI_expected_prev[6] !== 1'bx ) && ( DI_prev[6] !== DI_expected_prev[6] )
		&& ((DI_expected_prev[6] !== last_DI_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DI[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DI_expected_prev);
		$display ("     Real value = %b", DI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DI_exp[6] = DI_expected_prev[6];
	end
	if (
		( DI_expected_prev[7] !== 1'bx ) && ( DI_prev[7] !== DI_expected_prev[7] )
		&& ((DI_expected_prev[7] !== last_DI_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DI[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DI_expected_prev);
		$display ("     Real value = %b", DI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DI_exp[7] = DI_expected_prev[7];
	end
	if (
		( pc_expected_prev[0] !== 1'bx ) && ( pc_prev[0] !== pc_expected_prev[0] )
		&& ((pc_expected_prev[0] !== last_pc_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pc_exp[0] = pc_expected_prev[0];
	end
	if (
		( pc_expected_prev[1] !== 1'bx ) && ( pc_prev[1] !== pc_expected_prev[1] )
		&& ((pc_expected_prev[1] !== last_pc_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pc_exp[1] = pc_expected_prev[1];
	end
	if (
		( pc_expected_prev[2] !== 1'bx ) && ( pc_prev[2] !== pc_expected_prev[2] )
		&& ((pc_expected_prev[2] !== last_pc_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pc_exp[2] = pc_expected_prev[2];
	end
	if (
		( pc_expected_prev[3] !== 1'bx ) && ( pc_prev[3] !== pc_expected_prev[3] )
		&& ((pc_expected_prev[3] !== last_pc_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pc_exp[3] = pc_expected_prev[3];
	end
	if (
		( pc_expected_prev[4] !== 1'bx ) && ( pc_prev[4] !== pc_expected_prev[4] )
		&& ((pc_expected_prev[4] !== last_pc_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pc_exp[4] = pc_expected_prev[4];
	end
	if (
		( pc_expected_prev[5] !== 1'bx ) && ( pc_prev[5] !== pc_expected_prev[5] )
		&& ((pc_expected_prev[5] !== last_pc_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pc_exp[5] = pc_expected_prev[5];
	end
	if (
		( pc_expected_prev[6] !== 1'bx ) && ( pc_prev[6] !== pc_expected_prev[6] )
		&& ((pc_expected_prev[6] !== last_pc_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pc_exp[6] = pc_expected_prev[6];
	end
	if (
		( pc_expected_prev[7] !== 1'bx ) && ( pc_prev[7] !== pc_expected_prev[7] )
		&& ((pc_expected_prev[7] !== last_pc_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pc_exp[7] = pc_expected_prev[7];
	end
	if (
		( Q_expected_prev[0] !== 1'bx ) && ( Q_prev[0] !== Q_expected_prev[0] )
		&& ((Q_expected_prev[0] !== last_Q_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q_exp[0] = Q_expected_prev[0];
	end
	if (
		( Q_expected_prev[1] !== 1'bx ) && ( Q_prev[1] !== Q_expected_prev[1] )
		&& ((Q_expected_prev[1] !== last_Q_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q_exp[1] = Q_expected_prev[1];
	end
	if (
		( Q_expected_prev[2] !== 1'bx ) && ( Q_prev[2] !== Q_expected_prev[2] )
		&& ((Q_expected_prev[2] !== last_Q_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q_exp[2] = Q_expected_prev[2];
	end
	if (
		( Q_expected_prev[3] !== 1'bx ) && ( Q_prev[3] !== Q_expected_prev[3] )
		&& ((Q_expected_prev[3] !== last_Q_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q_exp[3] = Q_expected_prev[3];
	end
	if (
		( Q_expected_prev[4] !== 1'bx ) && ( Q_prev[4] !== Q_expected_prev[4] )
		&& ((Q_expected_prev[4] !== last_Q_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q_exp[4] = Q_expected_prev[4];
	end
	if (
		( Q_expected_prev[5] !== 1'bx ) && ( Q_prev[5] !== Q_expected_prev[5] )
		&& ((Q_expected_prev[5] !== last_Q_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q_exp[5] = Q_expected_prev[5];
	end
	if (
		( Q_expected_prev[6] !== 1'bx ) && ( Q_prev[6] !== Q_expected_prev[6] )
		&& ((Q_expected_prev[6] !== last_Q_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q_exp[6] = Q_expected_prev[6];
	end
	if (
		( Q_expected_prev[7] !== 1'bx ) && ( Q_prev[7] !== Q_expected_prev[7] )
		&& ((Q_expected_prev[7] !== last_Q_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q_exp[7] = Q_expected_prev[7];
	end
	if (
		( Q_expected_prev[8] !== 1'bx ) && ( Q_prev[8] !== Q_expected_prev[8] )
		&& ((Q_expected_prev[8] !== last_Q_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q_exp[8] = Q_expected_prev[8];
	end
	if (
		( Q_expected_prev[9] !== 1'bx ) && ( Q_prev[9] !== Q_expected_prev[9] )
		&& ((Q_expected_prev[9] !== last_Q_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q_exp[9] = Q_expected_prev[9];
	end
	if (
		( Q_expected_prev[10] !== 1'bx ) && ( Q_prev[10] !== Q_expected_prev[10] )
		&& ((Q_expected_prev[10] !== last_Q_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q_exp[10] = Q_expected_prev[10];
	end
	if (
		( Q_expected_prev[11] !== 1'bx ) && ( Q_prev[11] !== Q_expected_prev[11] )
		&& ((Q_expected_prev[11] !== last_Q_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q_exp[11] = Q_expected_prev[11];
	end
	if (
		( Q_expected_prev[12] !== 1'bx ) && ( Q_prev[12] !== Q_expected_prev[12] )
		&& ((Q_expected_prev[12] !== last_Q_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q_exp[12] = Q_expected_prev[12];
	end
	if (
		( Q_expected_prev[13] !== 1'bx ) && ( Q_prev[13] !== Q_expected_prev[13] )
		&& ((Q_expected_prev[13] !== last_Q_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q_exp[13] = Q_expected_prev[13];
	end
	if (
		( Q_expected_prev[14] !== 1'bx ) && ( Q_prev[14] !== Q_expected_prev[14] )
		&& ((Q_expected_prev[14] !== last_Q_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q_exp[14] = Q_expected_prev[14];
	end
	if (
		( Q_expected_prev[15] !== 1'bx ) && ( Q_prev[15] !== Q_expected_prev[15] )
		&& ((Q_expected_prev[15] !== last_Q_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q_exp[15] = Q_expected_prev[15];
	end
	if (
		( seg_expected_prev[0] !== 1'bx ) && ( seg_prev[0] !== seg_expected_prev[0] )
		&& ((seg_expected_prev[0] !== last_seg_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_expected_prev);
		$display ("     Real value = %b", seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_seg_exp[0] = seg_expected_prev[0];
	end
	if (
		( seg_expected_prev[1] !== 1'bx ) && ( seg_prev[1] !== seg_expected_prev[1] )
		&& ((seg_expected_prev[1] !== last_seg_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_expected_prev);
		$display ("     Real value = %b", seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_seg_exp[1] = seg_expected_prev[1];
	end
	if (
		( seg_expected_prev[2] !== 1'bx ) && ( seg_prev[2] !== seg_expected_prev[2] )
		&& ((seg_expected_prev[2] !== last_seg_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_expected_prev);
		$display ("     Real value = %b", seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_seg_exp[2] = seg_expected_prev[2];
	end
	if (
		( seg_expected_prev[3] !== 1'bx ) && ( seg_prev[3] !== seg_expected_prev[3] )
		&& ((seg_expected_prev[3] !== last_seg_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_expected_prev);
		$display ("     Real value = %b", seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_seg_exp[3] = seg_expected_prev[3];
	end
	if (
		( seg_expected_prev[4] !== 1'bx ) && ( seg_prev[4] !== seg_expected_prev[4] )
		&& ((seg_expected_prev[4] !== last_seg_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_expected_prev);
		$display ("     Real value = %b", seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_seg_exp[4] = seg_expected_prev[4];
	end
	if (
		( seg_expected_prev[5] !== 1'bx ) && ( seg_prev[5] !== seg_expected_prev[5] )
		&& ((seg_expected_prev[5] !== last_seg_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_expected_prev);
		$display ("     Real value = %b", seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_seg_exp[5] = seg_expected_prev[5];
	end
	if (
		( seg_expected_prev[6] !== 1'bx ) && ( seg_prev[6] !== seg_expected_prev[6] )
		&& ((seg_expected_prev[6] !== last_seg_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_expected_prev);
		$display ("     Real value = %b", seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_seg_exp[6] = seg_expected_prev[6];
	end
	if (
		( seg_expected_prev[7] !== 1'bx ) && ( seg_prev[7] !== seg_expected_prev[7] )
		&& ((seg_expected_prev[7] !== last_seg_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_expected_prev);
		$display ("     Real value = %b", seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_seg_exp[7] = seg_expected_prev[7];
	end
	if (
		( state_expected_prev[0] !== 1'bx ) && ( state_prev[0] !== state_expected_prev[0] )
		&& ((state_expected_prev[0] !== last_state_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_state_exp[0] = state_expected_prev[0];
	end
	if (
		( state_expected_prev[1] !== 1'bx ) && ( state_prev[1] !== state_expected_prev[1] )
		&& ((state_expected_prev[1] !== last_state_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_state_exp[1] = state_expected_prev[1];
	end
	if (
		( state_expected_prev[2] !== 1'bx ) && ( state_prev[2] !== state_expected_prev[2] )
		&& ((state_expected_prev[2] !== last_state_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_state_exp[2] = state_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module test_computer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLKK;
reg reset_pin;
reg [3:0] row;
// wires                                               
wire [2:0] aluc;
wire [7:0] answer;
wire carryout;
wire [3:0] choice;
wire [3:0] col;
wire [7:0] data_a;
wire [7:0] data_b;
wire [7:0] DI;
wire [7:0] num;
wire [7:0] pc;
wire [15:0] Q;
wire reg_we;
wire [7:0] seg;
wire [2:0] state;
wire Wren;

wire sampler;                             

// assign statements (if any)                          
test_computer i1 (
// port map - connection between master ports and signals/registers   
	.aluc(aluc),
	.answer(answer),
	.carryout(carryout),
	.choice(choice),
	.CLKK(CLKK),
	.col(col),
	.data_a(data_a),
	.data_b(data_b),
	.DI(DI),
	.num(num),
	.pc(pc),
	.Q(Q),
	.reg_we(reg_we),
	.reset_pin(reset_pin),
	.row(row),
	.seg(seg),
	.state(state),
	.Wren(Wren)
);

// CLKK
always
begin
	CLKK = 1'b0;
	CLKK = #1000 1'b1;
	#1000;
end 

// reset_pin
initial
begin
	reset_pin = 1'b1;
end 
// row[ 3 ]
initial
begin
	row[3] = 1'b0;
end 
// row[ 2 ]
initial
begin
	row[2] = 1'b0;
end 
// row[ 1 ]
initial
begin
	row[1] = 1'b0;
end 
// row[ 0 ]
initial
begin
	row[0] = 1'b0;
end 

test_computer_vlg_sample_tst tb_sample (
	.CLKK(CLKK),
	.reset_pin(reset_pin),
	.row(row),
	.sampler_tx(sampler)
);

test_computer_vlg_check_tst tb_out(
	.aluc(aluc),
	.answer(answer),
	.carryout(carryout),
	.choice(choice),
	.col(col),
	.data_a(data_a),
	.data_b(data_b),
	.DI(DI),
	.num(num),
	.pc(pc),
	.Q(Q),
	.reg_we(reg_we),
	.seg(seg),
	.state(state),
	.Wren(Wren),
	.sampler_rx(sampler)
);
endmodule

