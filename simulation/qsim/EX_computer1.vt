// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/23/2017 10:57:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    BCD
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BCD_vlg_sample_tst(
	IN_wr,
	clk,
	hex,
	sampler_tx
);
input  IN_wr;
input  clk;
input [15:0] hex;
output sampler_tx;

reg sample;
time current_time;
always @(IN_wr or clk or hex)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module BCD_vlg_check_tst (
	dec,
	hex,
	sampler_rx
);
input [15:0] dec;
input [15:0] hex;
input sampler_rx;

reg [15:0] dec_expected;
reg [15:0] hex_expected;

reg [15:0] dec_prev;
reg [15:0] hex_prev;

reg [15:0] dec_expected_prev;
reg [15:0] hex_expected_prev;

reg [15:0] last_dec_exp;
reg [15:0] last_hex_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	dec_prev = dec;
	hex_prev = hex;
end

// update expected /o prevs

always @(trigger)
begin
	dec_expected_prev = dec_expected;
	hex_expected_prev = hex_expected;
end


// expected dec[ 15 ]
initial
begin
	dec_expected[15] = 1'bX;
end 
// expected dec[ 14 ]
initial
begin
	dec_expected[14] = 1'bX;
end 
// expected dec[ 13 ]
initial
begin
	dec_expected[13] = 1'bX;
end 
// expected dec[ 12 ]
initial
begin
	dec_expected[12] = 1'bX;
end 
// expected dec[ 11 ]
initial
begin
	dec_expected[11] = 1'bX;
end 
// expected dec[ 10 ]
initial
begin
	dec_expected[10] = 1'bX;
end 
// expected dec[ 9 ]
initial
begin
	dec_expected[9] = 1'bX;
end 
// expected dec[ 8 ]
initial
begin
	dec_expected[8] = 1'bX;
end 
// expected dec[ 7 ]
initial
begin
	dec_expected[7] = 1'bX;
end 
// expected dec[ 6 ]
initial
begin
	dec_expected[6] = 1'bX;
end 
// expected dec[ 5 ]
initial
begin
	dec_expected[5] = 1'bX;
end 
// expected dec[ 4 ]
initial
begin
	dec_expected[4] = 1'bX;
end 
// expected dec[ 3 ]
initial
begin
	dec_expected[3] = 1'bX;
end 
// expected dec[ 2 ]
initial
begin
	dec_expected[2] = 1'bX;
end 
// expected dec[ 1 ]
initial
begin
	dec_expected[1] = 1'bX;
end 
// expected dec[ 0 ]
initial
begin
	dec_expected[0] = 1'bX;
end 
// generate trigger
always @(dec_expected or dec or hex_expected or hex)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dec = %b | expected hex = %b | ",dec_expected_prev,hex_expected_prev);
	$display("| real dec = %b | real hex = %b | ",dec_prev,hex_prev);
`endif
	if (
		( dec_expected_prev[0] !== 1'bx ) && ( dec_prev[0] !== dec_expected_prev[0] )
		&& ((dec_expected_prev[0] !== last_dec_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dec[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dec_expected_prev);
		$display ("     Real value = %b", dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dec_exp[0] = dec_expected_prev[0];
	end
	if (
		( dec_expected_prev[1] !== 1'bx ) && ( dec_prev[1] !== dec_expected_prev[1] )
		&& ((dec_expected_prev[1] !== last_dec_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dec[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dec_expected_prev);
		$display ("     Real value = %b", dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dec_exp[1] = dec_expected_prev[1];
	end
	if (
		( dec_expected_prev[2] !== 1'bx ) && ( dec_prev[2] !== dec_expected_prev[2] )
		&& ((dec_expected_prev[2] !== last_dec_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dec[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dec_expected_prev);
		$display ("     Real value = %b", dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dec_exp[2] = dec_expected_prev[2];
	end
	if (
		( dec_expected_prev[3] !== 1'bx ) && ( dec_prev[3] !== dec_expected_prev[3] )
		&& ((dec_expected_prev[3] !== last_dec_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dec[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dec_expected_prev);
		$display ("     Real value = %b", dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dec_exp[3] = dec_expected_prev[3];
	end
	if (
		( dec_expected_prev[4] !== 1'bx ) && ( dec_prev[4] !== dec_expected_prev[4] )
		&& ((dec_expected_prev[4] !== last_dec_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dec[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dec_expected_prev);
		$display ("     Real value = %b", dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dec_exp[4] = dec_expected_prev[4];
	end
	if (
		( dec_expected_prev[5] !== 1'bx ) && ( dec_prev[5] !== dec_expected_prev[5] )
		&& ((dec_expected_prev[5] !== last_dec_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dec[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dec_expected_prev);
		$display ("     Real value = %b", dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dec_exp[5] = dec_expected_prev[5];
	end
	if (
		( dec_expected_prev[6] !== 1'bx ) && ( dec_prev[6] !== dec_expected_prev[6] )
		&& ((dec_expected_prev[6] !== last_dec_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dec[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dec_expected_prev);
		$display ("     Real value = %b", dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dec_exp[6] = dec_expected_prev[6];
	end
	if (
		( dec_expected_prev[7] !== 1'bx ) && ( dec_prev[7] !== dec_expected_prev[7] )
		&& ((dec_expected_prev[7] !== last_dec_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dec[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dec_expected_prev);
		$display ("     Real value = %b", dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dec_exp[7] = dec_expected_prev[7];
	end
	if (
		( dec_expected_prev[8] !== 1'bx ) && ( dec_prev[8] !== dec_expected_prev[8] )
		&& ((dec_expected_prev[8] !== last_dec_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dec[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dec_expected_prev);
		$display ("     Real value = %b", dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dec_exp[8] = dec_expected_prev[8];
	end
	if (
		( dec_expected_prev[9] !== 1'bx ) && ( dec_prev[9] !== dec_expected_prev[9] )
		&& ((dec_expected_prev[9] !== last_dec_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dec[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dec_expected_prev);
		$display ("     Real value = %b", dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dec_exp[9] = dec_expected_prev[9];
	end
	if (
		( dec_expected_prev[10] !== 1'bx ) && ( dec_prev[10] !== dec_expected_prev[10] )
		&& ((dec_expected_prev[10] !== last_dec_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dec[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dec_expected_prev);
		$display ("     Real value = %b", dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dec_exp[10] = dec_expected_prev[10];
	end
	if (
		( dec_expected_prev[11] !== 1'bx ) && ( dec_prev[11] !== dec_expected_prev[11] )
		&& ((dec_expected_prev[11] !== last_dec_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dec[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dec_expected_prev);
		$display ("     Real value = %b", dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dec_exp[11] = dec_expected_prev[11];
	end
	if (
		( dec_expected_prev[12] !== 1'bx ) && ( dec_prev[12] !== dec_expected_prev[12] )
		&& ((dec_expected_prev[12] !== last_dec_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dec[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dec_expected_prev);
		$display ("     Real value = %b", dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dec_exp[12] = dec_expected_prev[12];
	end
	if (
		( dec_expected_prev[13] !== 1'bx ) && ( dec_prev[13] !== dec_expected_prev[13] )
		&& ((dec_expected_prev[13] !== last_dec_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dec[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dec_expected_prev);
		$display ("     Real value = %b", dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dec_exp[13] = dec_expected_prev[13];
	end
	if (
		( dec_expected_prev[14] !== 1'bx ) && ( dec_prev[14] !== dec_expected_prev[14] )
		&& ((dec_expected_prev[14] !== last_dec_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dec[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dec_expected_prev);
		$display ("     Real value = %b", dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dec_exp[14] = dec_expected_prev[14];
	end
	if (
		( dec_expected_prev[15] !== 1'bx ) && ( dec_prev[15] !== dec_expected_prev[15] )
		&& ((dec_expected_prev[15] !== last_dec_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dec[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dec_expected_prev);
		$display ("     Real value = %b", dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dec_exp[15] = dec_expected_prev[15];
	end
	if (
		( hex_expected_prev[0] !== 1'bx ) && ( hex_prev[0] !== hex_expected_prev[0] )
		&& ((hex_expected_prev[0] !== last_hex_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex_expected_prev);
		$display ("     Real value = %b", hex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex_exp[0] = hex_expected_prev[0];
	end
	if (
		( hex_expected_prev[1] !== 1'bx ) && ( hex_prev[1] !== hex_expected_prev[1] )
		&& ((hex_expected_prev[1] !== last_hex_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex_expected_prev);
		$display ("     Real value = %b", hex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex_exp[1] = hex_expected_prev[1];
	end
	if (
		( hex_expected_prev[2] !== 1'bx ) && ( hex_prev[2] !== hex_expected_prev[2] )
		&& ((hex_expected_prev[2] !== last_hex_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex_expected_prev);
		$display ("     Real value = %b", hex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex_exp[2] = hex_expected_prev[2];
	end
	if (
		( hex_expected_prev[3] !== 1'bx ) && ( hex_prev[3] !== hex_expected_prev[3] )
		&& ((hex_expected_prev[3] !== last_hex_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex_expected_prev);
		$display ("     Real value = %b", hex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex_exp[3] = hex_expected_prev[3];
	end
	if (
		( hex_expected_prev[4] !== 1'bx ) && ( hex_prev[4] !== hex_expected_prev[4] )
		&& ((hex_expected_prev[4] !== last_hex_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex_expected_prev);
		$display ("     Real value = %b", hex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex_exp[4] = hex_expected_prev[4];
	end
	if (
		( hex_expected_prev[5] !== 1'bx ) && ( hex_prev[5] !== hex_expected_prev[5] )
		&& ((hex_expected_prev[5] !== last_hex_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex_expected_prev);
		$display ("     Real value = %b", hex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex_exp[5] = hex_expected_prev[5];
	end
	if (
		( hex_expected_prev[6] !== 1'bx ) && ( hex_prev[6] !== hex_expected_prev[6] )
		&& ((hex_expected_prev[6] !== last_hex_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex_expected_prev);
		$display ("     Real value = %b", hex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex_exp[6] = hex_expected_prev[6];
	end
	if (
		( hex_expected_prev[7] !== 1'bx ) && ( hex_prev[7] !== hex_expected_prev[7] )
		&& ((hex_expected_prev[7] !== last_hex_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex_expected_prev);
		$display ("     Real value = %b", hex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex_exp[7] = hex_expected_prev[7];
	end
	if (
		( hex_expected_prev[8] !== 1'bx ) && ( hex_prev[8] !== hex_expected_prev[8] )
		&& ((hex_expected_prev[8] !== last_hex_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex_expected_prev);
		$display ("     Real value = %b", hex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex_exp[8] = hex_expected_prev[8];
	end
	if (
		( hex_expected_prev[9] !== 1'bx ) && ( hex_prev[9] !== hex_expected_prev[9] )
		&& ((hex_expected_prev[9] !== last_hex_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex_expected_prev);
		$display ("     Real value = %b", hex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex_exp[9] = hex_expected_prev[9];
	end
	if (
		( hex_expected_prev[10] !== 1'bx ) && ( hex_prev[10] !== hex_expected_prev[10] )
		&& ((hex_expected_prev[10] !== last_hex_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex_expected_prev);
		$display ("     Real value = %b", hex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex_exp[10] = hex_expected_prev[10];
	end
	if (
		( hex_expected_prev[11] !== 1'bx ) && ( hex_prev[11] !== hex_expected_prev[11] )
		&& ((hex_expected_prev[11] !== last_hex_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex_expected_prev);
		$display ("     Real value = %b", hex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex_exp[11] = hex_expected_prev[11];
	end
	if (
		( hex_expected_prev[12] !== 1'bx ) && ( hex_prev[12] !== hex_expected_prev[12] )
		&& ((hex_expected_prev[12] !== last_hex_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex_expected_prev);
		$display ("     Real value = %b", hex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex_exp[12] = hex_expected_prev[12];
	end
	if (
		( hex_expected_prev[13] !== 1'bx ) && ( hex_prev[13] !== hex_expected_prev[13] )
		&& ((hex_expected_prev[13] !== last_hex_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex_expected_prev);
		$display ("     Real value = %b", hex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex_exp[13] = hex_expected_prev[13];
	end
	if (
		( hex_expected_prev[14] !== 1'bx ) && ( hex_prev[14] !== hex_expected_prev[14] )
		&& ((hex_expected_prev[14] !== last_hex_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex_expected_prev);
		$display ("     Real value = %b", hex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex_exp[14] = hex_expected_prev[14];
	end
	if (
		( hex_expected_prev[15] !== 1'bx ) && ( hex_prev[15] !== hex_expected_prev[15] )
		&& ((hex_expected_prev[15] !== last_hex_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex_expected_prev);
		$display ("     Real value = %b", hex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex_exp[15] = hex_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module BCD_vlg_vec_tst();
// constants                                           
// general purpose registers
reg IN_wr;
reg clk;
reg [15:0] treg_hex;
// wires                                               
wire [15:0] dec;
wire [15:0] hex;

wire sampler;                             

// assign statements (if any)                          
assign hex = treg_hex;
BCD i1 (
// port map - connection between master ports and signals/registers   
	.IN_wr(IN_wr),
	.clk(clk),
	.dec(dec),
	.hex(hex)
);
// hex[ 15 ]
initial
begin
	treg_hex[15] = 1'b0;
end 
// hex[ 14 ]
initial
begin
	treg_hex[14] = 1'b0;
end 
// hex[ 13 ]
initial
begin
	treg_hex[13] = 1'b0;
end 
// hex[ 12 ]
initial
begin
	treg_hex[12] = 1'b0;
end 
// hex[ 11 ]
initial
begin
	treg_hex[11] = 1'b0;
end 
// hex[ 10 ]
initial
begin
	treg_hex[10] = 1'b0;
end 
// hex[ 9 ]
initial
begin
	treg_hex[9] = 1'b0;
end 
// hex[ 8 ]
initial
begin
	treg_hex[8] = 1'b0;
end 
// hex[ 7 ]
initial
begin
	treg_hex[7] = 1'b0;
end 
// hex[ 6 ]
initial
begin
	treg_hex[6] = 1'b0;
	treg_hex[6] = #640000 1'b1;
end 
// hex[ 5 ]
initial
begin
	treg_hex[5] = 1'b0;
	treg_hex[5] = #320000 1'b1;
	treg_hex[5] = #320000 1'b0;
	treg_hex[5] = #320000 1'b1;
end 
// hex[ 4 ]
initial
begin
	repeat(3)
	begin
		treg_hex[4] = 1'b0;
		treg_hex[4] = #160000 1'b1;
		# 160000;
	end
	treg_hex[4] = 1'b0;
end 
// hex[ 3 ]
initial
begin
	repeat(6)
	begin
		treg_hex[3] = 1'b0;
		treg_hex[3] = #80000 1'b1;
		# 80000;
	end
	treg_hex[3] = 1'b0;
end 
// hex[ 2 ]
initial
begin
	repeat(12)
	begin
		treg_hex[2] = 1'b0;
		treg_hex[2] = #40000 1'b1;
		# 40000;
	end
	treg_hex[2] = 1'b0;
end 
// hex[ 1 ]
always
begin
	treg_hex[1] = 1'b0;
	treg_hex[1] = #20000 1'b1;
	#20000;
end 
// hex[ 0 ]
always
begin
	treg_hex[0] = 1'b0;
	treg_hex[0] = #10000 1'b1;
	#10000;
end 

// IN_wr
initial
begin
	IN_wr = 1'b0;
	IN_wr = #10000 1'b1;
	IN_wr = #350000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

BCD_vlg_sample_tst tb_sample (
	.IN_wr(IN_wr),
	.clk(clk),
	.hex(hex),
	.sampler_tx(sampler)
);

BCD_vlg_check_tst tb_out(
	.dec(dec),
	.hex(hex),
	.sampler_rx(sampler)
);
endmodule

